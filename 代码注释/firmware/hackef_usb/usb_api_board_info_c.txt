这些函数是处理USBVendor请求的处理程序，根据请求的不同，从设备的寄存器、固件信息、IAP命令等读取数据，并通过USB传输将数据返回给主机。下面分别对每个函数进行解释：

usb_vendor_request_read_board_id函数用于读取设备的板ID。在USB传输的设置阶段，它调用detected_platform函数获取板ID，并将其存储在endpoint的缓冲区中。然后，使用usb_transfer_schedule_block函数安排将数据传输给主机，并通过usb_transfer_schedule_ack函数发送ACK响应。

usb_vendor_request_read_version_string函数用于读取设备的版本字符串。在设置阶段，它首先获取版本字符串的长度，然后将版本字符串复制到endpoint的缓冲区中。接下来，使用usb_transfer_schedule_block函数安排将数据传输给主机，并通过usb_transfer_schedule_ack函数发送ACK响应。

usb_vendor_request_read_partid_serialno函数用于读取设备的部件ID和序列号。在设置阶段，它通过调用IAP命令读取部件ID和序列号，并将其存储在read_partid_serialno结构体中。然后，使用usb_transfer_schedule_block函数安排将数据传输给主机，并通过usb_transfer_schedule_ack函数发送ACK响应。

usb_vendor_request_reset函数用于重置设备。在设置阶段，它调用wwdt_reset函数进行重置。然后，使用usb_transfer_schedule_ack函数发送ACK响应。

usb_vendor_request_read_board_rev函数用于读取设备的板修订号。在设置阶段，它调用detected_revision函数获取板修订号，并将其存储在endpoint的缓冲区中。然后，使用usb_transfer_schedule_block函数安排将数据传输给主机，并通过usb_transfer_schedule_ack函数发送ACK响应。

usb_vendor_request_read_supported_platform函数用于读取设备支持的平台。在设置阶段，它调用supported_platform函数获取支持的平台，并将该值存储在endpoint的缓冲区中。然后，使用usb_transfer_schedule_block函数安排将数据传输给主机，并通过usb_transfer_schedule_ack函数发送ACK响应。